3 Approaches
first: O(m*n) linear search for every element in a to in b
second: O(mlogn + nlogn) sorting both array using merge sort and then searching for intersection using merge algorithm
third: O(mlogn + nlogn) sorting smaller array using merge sort and then searching for every element in b to be in a using binary search

third approach:

array1=[6,2,6,2,1,9,8]
array2=[3,6,8,2,9]
if len(array1)>len(array2):
    array1=b
    array2=a
else:
    array2=b
    array1=a
    
def merge(a1,a2,a):
    i=0
    j=0
    k=0
    while i<len(a1) and j<len(a2):
        if (a1[i]<a2[j]):
            a[k]=a1[i]
            k=k+1
            i=i+1
        else:
            a[k]=a2[j]
            k=k+1
            j=j+1
    while i<len(a1):
        a[k]=a1[i]
        k=k+1
        i=i+1
    while j<len(a2):
        a[k]=a2[j]
        k=k+1
        j=j+1
        
#-------------------------------------------------------------------------------

def merge_sort(a):
    if len(a)==0 or len(a)==1:
        return
    mid=len(a)//2
    a1=a[0:mid]
    a2=a[mid:]
    merge_sort(a1)
    merge_sort(a2)
    merge(a1,a2,a)
    
merge_sort(a)
print(a)

#---------------------------------------------------------------------------------

y=[]
for x in b:
    def binarySearch(a, x, si, ei):
        if si>ei:
            return -1
        mid=(si+ei)//2
        if a[mid]==x:
            print(a[mid])
            y.append(a[mid])
        elif a[mid]>x:
            return binarySearch(a, x, si, mid-1)
        else:
            return binarySearch(a, x, mid+1, ei)
    binarySearch(a, x, 0, len(a)-1)
y=list(set(y))
print(y)
